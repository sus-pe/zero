# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Python package
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
jobs:
  build:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: pre-commit
        run: |
          SKIP=no-commit-to-branch uv run pre-commit run --all-files
      - name: Compute Release Metadata
        id: meta
        run: |
          VERSION="v$(uv version --short)"
          COMMIT="${GITHUB_SHA}"

          if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
            RELEASE_ID="${VERSION}.dev${GITHUB_PR_NUMBER}-${GITHUB_RUN_NUMBER}.${COMMIT}"
            DRAFT=true
          else
            RELEASE_ID="${VERSION}.${COMMIT}"
            DRAFT=false
          fi

          {
            echo "release_id=$RELEASE_ID"
            echo "is_draft=$DRAFT"
            echo "is_prerelease=true"
          } >> "$GITHUB_OUTPUT"
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.release_id }}
          name: ${{ steps.meta.outputs.release_id }}
          draft: ${{ steps.meta.outputs.is_draft }}
          prerelease: ${{ steps.meta.outputs.is_prerelease }}
          fail_on_unmatched_files: true
          files: dist/*
