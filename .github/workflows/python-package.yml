# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Python package
on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
jobs:
  build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - uses: actions/github-script@v7
        name: Calculate cross-platform precommit cache dir
        id: set-pre-commit-home
        with:
          script: |
            const os = require('os');
            const path = require('path');
            const home = process.env.HOME || process.env.USERPROFILE || os.homedir();
            if (!home) core.setFailed('Could not resolve HOME/USERPROFILE on this runner.');
            const pch = path.join(home, '.cache', 'pre-commit');
            core.exportVariable('PRE_COMMIT_HOME', pch);
            core.info(`PRE_COMMIT_HOME = ${pch}`);
      - name: Cache venv + pre-commit
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ${{ env.PRE_COMMIT_HOME }}
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock', '.pre-commit-config.yaml') }}
      - name: Install the project
        run: uv sync --locked --all-extras --dev
      - name: pre-commit
        env:
          SKIP: no-commit-to-branch
        run: uv run pre-commit run --all-files
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-dist
          path: dist/*
          if-no-files-found: ignore
  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    concurrency:
      group: release-${{ github.ref }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        name: Calculate cross-platform release metadata
        id: meta
        with:
          script: |
            const { execSync } = require('child_process');

            // Read uv version
            const uvVersion = execSync('uv version --short', { encoding: 'utf8' }).trim();
            const version = `v${uvVersion}`;

            const commit = process.env.GITHUB_SHA;
            const eventName = process.env.GITHUB_EVENT_NAME;
            const runNumber = process.env.GITHUB_RUN_NUMBER;
            const prNumber = (context.payload.pull_request && context.payload.pull_request.number) || '';

            let release_id, draft;
            if (eventName === 'pull_request') {
              release_id = `${version}.dev${prNumber}-${runNumber}.${commit}`;
              draft = true;
            } else {
              release_id = `${version}.${commit}`;
              draft = false;
            }

            core.setOutput('release_id', release_id);
            core.setOutput('is_draft', String(draft));
            core.setOutput('is_prerelease', 'true')
      - name: Download artifacts from all OSes
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.release_id }}
          name: ${{ steps.meta.outputs.release_id }}
          draft: ${{ steps.meta.outputs.is_draft }}
          prerelease: ${{ steps.meta.outputs.is_prerelease }}
          fail_on_unmatched_files: true
          generate_release_notes: true
          files: release_artifacts/**/*
